// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // For SQLite in development, change provider to "sqlite"
}

model Experiment {
  id              String   @id @default(cuid())
  slug            String   @unique
  name            String
  description     String?
  status          String   @default("draft") // draft, active, completed, archived
  archived        Boolean  @default(false)
  group           String?  // Optional experiment group for organization
  prolificStudyId String?  @unique
  evaluationMode  String   @default("comparison") // comparison, single_video
  config          Json     // Stores experiment configuration (models, scenarios, parameters)
  createdBy       String?  // Stack Auth user ID
  organizationId  String?  // Organization this experiment belongs to (temporarily optional for migration)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  startedAt       DateTime?
  completedAt     DateTime?
  archivedAt      DateTime?
  
  organization                    Organization? @relation(fields: [organizationId], references: [id])
  twoVideoComparisonTasks         TwoVideoComparisonTask[]
  singleVideoEvaluationTasks      SingleVideoEvaluationTask[]
  participants                    Participant[]
  twoVideoComparisonSubmissions   TwoVideoComparisonSubmission[]
  singleVideoEvaluationSubmissions SingleVideoEvaluationSubmission[]
  
  @@index([slug])
  @@index([evaluationMode])
  @@index([organizationId])
}

model TwoVideoComparisonTask {
  id           String   @id @default(cuid())
  experimentId String
  scenarioId   String
  modelA       String
  modelB       String
  videoAPath   String
  videoBPath   String
  metadata     Json?
  createdAt    DateTime @default(now())
  
  experiment                      Experiment @relation(fields: [experimentId], references: [id])
  twoVideoComparisonSubmissions   TwoVideoComparisonSubmission[]
  
  @@index([experimentId])
}

model Participant {
  id                 String   @id @default(cuid())
  prolificId         String?  @unique
  prolificSubmissionId String? @unique
  experimentId       String
  sessionId          String   @unique @default(cuid())
  status             String   @default("active") // active, completed, rejected, screening_failed
  completionCode     String?
  assignedTwoVideoComparisonTasks    Json    @default("[]") // Array of two-video comparison task IDs
  assignedSingleVideoEvaluationTasks Json    @default("[]") // Array of single-video evaluation task IDs
  startedAt          DateTime @default(now())
  completedAt        DateTime?
  metadata           Json?    // Additional Prolific data
  
  // Screening fields
  screeningStatus    String   @default("pending") // pending, passed, failed
  screeningVersion   String?  // Track which screening config version they used
  screeningAttempts  Int      @default(0) // Number of screening attempts
  screeningData      Json?    // Store answers and validation results
  screeningCompletedAt DateTime? // When they completed (passed or failed) screening
  
  // Rejection fields for Prolific integration
  rejectionReason      String?   // Reason for rejection
  rejectedAt           DateTime? // When they were rejected
  
  experiment                       Experiment @relation(fields: [experimentId], references: [id])
  twoVideoComparisonSubmissions    TwoVideoComparisonSubmission[]
  singleVideoEvaluationSubmissions SingleVideoEvaluationSubmission[]
  
  @@index([prolificId])
  @@index([experimentId])
}

model TwoVideoComparisonSubmission {
  id                         String   @id @default(cuid())
  twoVideoComparisonTaskId   String
  participantId              String
  experimentId               String
  chosenModel                String?  // A or B (nullable for drafts)
  dimensionScores            Json     // Stores all dimension scores
  completionTimeSeconds      Float?
  clientMetadata             Json?    // Browser info, etc.
  status                     String   @default("draft") // draft, completed
  lastSavedAt                DateTime @updatedAt
  createdAt                  DateTime @default(now())
  
  twoVideoComparisonTask     TwoVideoComparisonTask @relation(fields: [twoVideoComparisonTaskId], references: [id])
  participant                Participant @relation(fields: [participantId], references: [id])
  experiment                 Experiment @relation(fields: [experimentId], references: [id])
  
  @@unique([twoVideoComparisonTaskId, participantId]) // Prevent duplicate evaluations
  @@index([twoVideoComparisonTaskId])
  @@index([participantId])
  @@index([experimentId])
  @@index([status])
}

model Video {
  id          String   @id @default(cuid())
  key         String   @unique  // S3/storage key
  name        String
  url         String
  size        Int
  duration    Float?   // Video duration in seconds
  metadata    Json?    // Additional video metadata (resolution, codec, etc.)
  tags        String[] // Array of tags for categorization
  groups      String[] // Array of group names
  modelName   String?  // Auto-detected or manually assigned model name
  scenarioId  String?  // Associated scenario if applicable
  organizationId String? // Organization this video belongs to (nullable for shared videos)
  isShared    Boolean  @default(false) // Allow shared video library
  uploadedAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organization                Organization? @relation(fields: [organizationId], references: [id])
  singleVideoEvaluationTasks  SingleVideoEvaluationTask[]

  @@index([tags])
  @@index([groups])
  @@index([modelName])
  @@index([scenarioId])
  @@index([organizationId])
}

model SingleVideoEvaluationTask {
  id           String   @id @default(cuid())
  experimentId String
  scenarioId   String
  modelName    String
  videoPath    String
  videoId      String?  // Optional link to Video model
  metadata     Json?
  createdAt    DateTime @default(now())
  
  experiment                       Experiment @relation(fields: [experimentId], references: [id])
  video                            Video?     @relation(fields: [videoId], references: [id])
  singleVideoEvaluationSubmissions SingleVideoEvaluationSubmission[]
  
  @@index([experimentId])
  @@index([scenarioId])
}

model SingleVideoEvaluationSubmission {
  id                            String   @id @default(cuid())
  singleVideoEvaluationTaskId   String
  participantId                 String
  experimentId                  String
  dimensionScores               Json     // Stores all dimension scores (1-5 scale)
  completionTimeSeconds         Float?
  clientMetadata                Json?    // Browser info, etc.
  status                        String   @default("draft") // draft, completed
  lastSavedAt                   DateTime @updatedAt
  createdAt                     DateTime @default(now())
  
  singleVideoEvaluationTask     SingleVideoEvaluationTask @relation(fields: [singleVideoEvaluationTaskId], references: [id])
  participant                   Participant @relation(fields: [participantId], references: [id])
  experiment                    Experiment @relation(fields: [experimentId], references: [id])
  
  @@unique([singleVideoEvaluationTaskId, participantId]) // Prevent duplicate evaluations
  @@index([singleVideoEvaluationTaskId])
  @@index([participantId])
  @@index([experimentId])
  @@index([status])
}

// Organization Role Enum
enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

// Organization Model
model Organization {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Settings
  settings    Json     @default("{}")
  
  // Stack Auth integration
  stackTeamId String?  @unique // Maps to Stack Auth team
  
  // Relationships
  members     OrganizationMember[]
  experiments Experiment[]
  videos      Video[]
  invitations OrganizationInvitation[]
  
  @@map("organizations")
}

// Organization Member Model
model OrganizationMember {
  id             String           @id @default(cuid())
  organizationId String
  stackUserId    String           // Stack Auth user ID
  role           OrganizationRole @default(MEMBER)
  joinedAt       DateTime         @default(now())
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, stackUserId])
  @@map("organization_members")
}

// Organization Invitation Model
model OrganizationInvitation {
  id             String           @id @default(cuid())
  organizationId String
  email          String
  role           OrganizationRole @default(MEMBER)
  token          String           @unique
  createdAt      DateTime         @default(now())
  expiresAt      DateTime
  acceptedAt     DateTime?
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, email])
  @@map("organization_invitations")
}